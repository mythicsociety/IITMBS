"Front";"Back";"Extra"
"In the context of the train network graph discussed, what do the nodes (or vertices) and the directed edges represent?<ul><li>a) Nodes are trains, and edges are stations.</li><li>b) Nodes are stations, and edges are direct train routes between them.</li><li>c) Nodes are days of the week, and edges are train schedules.</li><li>d) Nodes are passengers, and edges are their itineraries.</li></ul>";"Correct: b)";"<b>Explanation:</b> The graph models the physical network. Each station is a distinct location, represented as a node. A directed edge from station A to station B signifies that a direct train service exists, traveling in that specific direction.<br><b>Distractor Rationale:</b><ul><li>a) This inverts the relationship; trains are the connections (edges), not the locations (nodes).</li><li>c) The lecture explicitly mentions that the basic graph does not capture scheduling information like days of the week.</li><li>d) The graph represents the potential routes available to all passengers, not the specific journeys of individuals.</li></ul>"
"Why can there be more than one labeled, directed edge between the same two nodes (stations) in the train graph?<ul><li>a) Because a station can have multiple platforms.</li><li>b) Because some trains are faster than others.</li><li>c) Because multiple, distinct train services can operate on the same route between two stations.</li><li>d) Because passengers can choose to travel in different classes.</li></ul>";"Correct: c)";"<b>Explanation:</b> Each edge represents a specific direct train service. If two different trains (e.g., Train 12213 and Train 02245) both travel directly from Station A to Station B, each one is represented by its own unique labeled edge. The label, typically the train number, distinguishes them.<br><b>Distractor Rationale:</b><ul><li>a) Multiple platforms are an internal detail of a station (node) and do not create new routes (edges).</li><li>b) Train speed is a property of the service, but the existence of the service itself is what creates the edge, not its speed.</li><li>d) Travel class is an attribute of a ticket on a train, not a reason to create a separate edge in the network graph.</li></ul>"
"In the train network graph, what does finding a path from Bangalore to Kanpur that goes through Secunderabad and then Delhi (Bangalore → Secunderabad → Delhi → Kanpur) signify?<ul><li>a) That a single train travels through all four cities in that order.</li><li>b) That it is impossible to travel from Bangalore to Kanpur.</li><li>c) That a journey from Bangalore to Kanpur requires at least two train changes.</li><li>d) That Secunderabad is the most important station in India.</li></ul>";"Correct: c)";"<b>Explanation:</b> A path composed of multiple distinct edges (hops) represents a journey that requires changing trains. The path Bangalore → Secunderabad is the first train, Secunderabad → Delhi is the second, and Delhi → Kanpur is the third. This requires changing trains at Secunderabad and Delhi.<br><b>Distractor Rationale:</b><ul><li>a) A single train would be represented by a single edge label followed along a path, not a sequence of different, unrelated edges.</li><li>b) The existence of a path proves that travel is possible, not impossible.</li><li>d) While Secunderabad showed good connectivity in the example, the path itself only describes a possible route, not the relative importance of a station.</li></ul>"
"What is the primary advantage of pre-calculating the entire train network graph before searching for a route, instead of iterating through train lists for each individual query?<ul><li>a) It uses less computer memory.</li><li>b) It provides real-time information about train delays.</li><li>c) It captures all relationships once, making subsequent searches for multi-hop routes more efficient.</li><li>d) It guarantees finding the cheapest possible fare.</li></ul>";"Correct: c)";"<b>Explanation:</b> The main benefit is efficiency. By processing all train schedules once to build a comprehensive graph, we create a compact data structure. Finding complex, multi-change routes on this graph is much faster than repeatedly scanning the entire raw list of trains for every new travel query.<br><b>Distractor Rationale:</b><ul><li>a) A large graph can consume significant memory; the advantage is speed, not necessarily lower memory usage.</li><li>b) The graph, as discussed, is static and does not contain real-time information.</li><li>d) The graph models connectivity, not fare data.</li></ul>"
"The lecture demonstrated that the static graph representation of the train network was missing a crucial piece of information for practical travel planning. What was it?<ul><li>a) The distance between stations.</li><li>b) The number of platforms at each station.</li><li>c) The running day(s) of the week for each train.</li><li>d) The catering options available on each train.</li></ul>";"Correct: c)";"<b>Explanation:</b> The transcript highlights that a connection might exist, but the train may only run on specific days (e.g., only on Saturdays). Without knowing the schedule, a traveler cannot be sure if a connection is actually available on their desired day of travel.<br><b>Distractor Rationale:</b><ul><li>a) Distance is useful but secondary to knowing if a train is actually running.</li><li>b) Platform numbers are a minor detail needed upon arrival, not for initial route planning.</li><li>d) Catering is an amenity and not a core component of route planning.</li></ul>"
"How is the connectivity of a particular station (e.g., how many direct routes originate from or arrive at it) identified within the graph?<ul><li>a) By the size of the station's name.</li><li>b) By counting the number of incoming and outgoing edges connected to the station's node.</li><li>c) By its geographical position on the map.</li><li>d) By the number of times the station appears in the raw data.</li></ul>";"Correct: b)";"<b>Explanation:</b> In graph theory, the number of edges connected to a node is its 'degree'. A station's connectivity is determined by its in-degree (number of arriving trains/edges) and out-degree (number of departing trains/edges). A higher total degree means better direct connectivity.<br><b>Distractor Rationale:</b><ul><li>a) The name is just a label; it has no bearing on connectivity.</li><li>c) Geographical position is incidental; a remote station could be a major hub with many edges.</li><li>d) A station can appear many times in the data but have few unique connections. Counting edges on the graph is the correct measure.</li></ul>"
"Consider the following pseudocode designed to build a graph represented by a matrix:<br><pre>Procedure CreateGraph(connections)
n = NumberOfNodes()
graphMatrix = CreateMatrix(n, n)
foreach i from 0 to n-1 {
foreach j from 0 to n-1 {
if (HasDirectLink(i, j, connections)) {
graphMatrix[i][j] = 1
}
}
}
return graphMatrix
End Procedure</pre>How would this logic be adapted to build the train graph?<ul><li>a) The 'connections' input would be a list of passengers.</li><li>b) The 'HasDirectLink' function would check if station 'i' and station 'j' appear in the route of the same direct train.</li><li>c) The procedure would need to be run separately for each day of the week.</li><li>d) The matrix would store train names instead of 1s.</li></ul>";"Correct: b)";"<b>Explanation:</b> The core logic is to check every possible pair of nodes (stations) and see if an edge should exist. For the train network, the condition ('HasDirectLink') is checking the raw train schedule data ('connections') to see if a single train travels from station 'i' to station 'j'.<br><b>Distractor Rationale:</b><ul><li>a) The input is the network data (train schedules), not user data.</li><li>c) This pseudocode builds the static graph; handling schedules would require a more complex structure.</li><li>d) While possible, the simple matrix representation shown uses 1 to indicate the existence of an edge and 0 for its absence. Labels would be stored differently.</li></ul>"
"If a train graph is stored in a matrix named TrainMatrix, where TrainMatrix[i][j] == 1 indicates a direct route from station i to station j, how would you find all stations one can travel to directly from station k?<ul><li>a) Iterate through the entire column k and collect indices i where TrainMatrix[i][k] == 1.</li><li>b) Iterate through the entire row k and collect indices j where TrainMatrix[k][j] == 1.</li><li>c) Sum all the values in row k and column k.</li><li>d) Find the first j where TrainMatrix[k][j] == 1.</li></ul>";"Correct: b)";"<b>Explanation:</b> The rows in this matrix representation correspond to outgoing edges. To find all direct destinations from a source station k, you must scan the entire row for k and identify all columns j where an edge exists (i.e., the value is 1).<br><b>Distractor Rationale:</b><ul><li>a) Iterating through column k would find all stations that have a direct train to station k (incoming edges).</li><li>c) Summing the values would give you the number of connections but not the identities of the connected stations.</li><li>d) This would only find the first available destination, not all of them.</li></ul>"
"Assume there are n distinct, direct train routes from Chennai to Delhi. A person wants to go from Chennai to Delhi and then return to Chennai on a different train route. How many different round-trip options does this person have?<ul><li>a) n</li><li>b) n * n</li><li>c) n * (n - 1)</li><li>d) n - 1</li></ul>";"Correct: c)";"<b>Explanation:</b> This is a combinatorial problem. There are n choices for the journey from Chennai to Delhi. After choosing one route, there are n - 1 remaining routes for the return journey, since the return route must be different. The total number of combinations is the product of the choices for each leg of the journey: n * (n - 1).<br><b>Distractor Rationale:</b><ul><li>a) This only accounts for the initial trip.</li><li>b) n * n would be the correct answer if the person could return on the same route they took to get there.</li><li>d) This incorrectly subtracts instead of multiplying the possibilities.</li></ul>"
"In the graph, a path from Station A to Station D is found by following a sequence of edges with the same label (e.g., Train T1): A -> B -> C -> D. What does this represent?<ul><li>a) A journey requiring three train changes.</li><li>b) The shortest possible route between A and D.</li><li>c) The route of a single, continuous train journey.</li><li>d) A circular tour that starts at A and ends at D.</li></ul>";"Correct: c)";"<b>Explanation:</b> The edge label represents a specific train service. Following a single, consistent label across multiple hops in the graph is equivalent to tracing the path of that one train as it stops at intermediate stations. It is a single journey, not a series of changes.<br><b>Distractor Rationale:</b><ul><li>a) A journey with changes would involve a path with different edge labels.</li><li>b) This path may or may not be the shortest in terms of hops or distance; it is simply the path of one specific train.</li><li>d) A circular tour would have to end back at the starting node, A.</li></ul>"
"If the train graph shows an edge from Pune to Secunderabad and another edge from Secunderabad to Nagpur, but no direct edge from Pune to Nagpur, what is the minimum number of trains required to travel from Pune to Nagpur?<ul><li>a) One</li><li>b) Two</li><li>c) Three</li><li>d) It's impossible to tell.</li></ul>";"Correct: b)";"<b>Explanation:</b> The path from Pune to Nagpur requires traversing two separate edges: one from Pune to Secunderabad, and a second from Secunderabad to Nagpur. This represents a journey with one change of trains at Secunderabad, thus requiring two trains in total.<br><b>Distractor Rationale:</b><ul><li>a) One train would be represented by a direct edge from Pune to Nagpur.</li><li>c) Three trains would be required for a path with three edges (hops).</li><li>d) The graph explicitly provides this information; the path is clear.</li></ul>"
"What does an undirected edge in a graph signify, and why was a directed graph chosen for the train network?<ul><li>a) An undirected edge is a one-way connection; it was chosen because trains only go one way.</li><li>b) An undirected edge is a two-way, symmetric relationship; a directed graph was chosen because a train from A to B does not automatically imply a return train from B to A.</li><li>c) An undirected edge has no label; a directed graph was chosen to add train numbers.</li><li>d) An undirected edge connects more than two nodes; a directed graph was chosen for simplicity.</li></ul>";"Correct: b)";"<b>Explanation:</b> An undirected edge implies the relationship is mutual (if A is similar to B, B is similar to A). A directed graph is necessary for the train network because train services are directional. A specific train (e.g., 02201) goes from A to B. A separate return service (e.g., 02202) is required to go from B to A. The existence of one does not guarantee the other.<br><b>Distractor Rationale:</b><ul><li>a) This misdefines an undirected edge.</li><li>c) Both directed and undirected edges can have labels.</li><li>d) Edges, by definition, connect pairs of nodes.</li></ul>"